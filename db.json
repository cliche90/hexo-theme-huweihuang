{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"e025c876be5bf46ccdb654357c1682cf2af2a118","modified":1549697236713},{"_id":"source/CNAME","hash":"763d49e30214e81c14cda37f89a00bb0783682c2","modified":1549698425130},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1549697236737},{"_id":"themes/huweihuang/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1549697236737},{"_id":"source/_posts/Frontend-Trend.md","hash":"2051d3c7435cdb1af9a7e58f48f06d8b1c2e9c3f","modified":1549709220463},{"_id":"source/about/index.md","hash":"3b2e618c4a50dd0bbe47c4cdc4cc45f38efb2a12","modified":1549697236713},{"_id":"source/archive/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1549697236713},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1549697236733},{"_id":"source/tags/index.md","hash":"f6ad1039c242795de5cd7d81781148f8c5298c28","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1549697236737},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1549697236737},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1549697236737},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1549697236737},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1549697236737},{"_id":"themes/huweihuang/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1549697236737},{"_id":"themes/huweihuang/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1549697236737},{"_id":"themes/huweihuang/layout/post.ejs","hash":"a36524a762090581a858ae55b62ca18e6251876a","modified":1549697236737},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1549697236737},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1549697236737},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1549697236737},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1549697236713},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"720349195a5ea7b610a82ce3ce74298fb2bc7347","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"0650e884abfdde56ca0d84a7e9bb53db3085ed42","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1549697236737},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1549697236737},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1549697236737},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1549697236737},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1549697236737},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1549697236737},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1549697236741},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1549697236741},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1549697236741},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1549697236741},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1549697236741},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1549697236741},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1549697236741},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1549697236741},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1549697236741},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1549697236741},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1549697236741},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1549697236741},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1549697236741},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1549697236741},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1549697236745},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1549697236745},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1549697236745},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1549697236745},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1549697236721},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1549697236741},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1549697236741},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1549697236741},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1549697236741},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1549697236725},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1549697236725},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1549697236737},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1549697236741},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1549697236741},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1549697236717},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1549697236737},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1549697236741},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1549697236737},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1549697236713},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1549697236713},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1549697236729},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1549697236733},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1549697236717},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1549697236729},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1549697236733},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1549697236721},{"_id":"public/post-sitemap.xml","hash":"5973619398e7dbc3921aa947e8c0b7114c884718","modified":1549709241614},{"_id":"public/page-sitemap.xml","hash":"7f4feaaa1b20de2862284901f995e26adf74788c","modified":1549709241643},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1549709241652},{"_id":"public/sitemap.xml","hash":"3067989a482c1dad7df650f57c89f3754096370b","modified":1549709241653},{"_id":"public/404.html","hash":"5513454bce1beeb8bb603093a8d9afdc194f32d2","modified":1549709241655},{"_id":"public/tags/index.html","hash":"a8429138f4a648742428a03a0ced64505c433a81","modified":1549709241655},{"_id":"public/about/index.html","hash":"7477a24f38b9b2416ba814df66c8462a8a8bd364","modified":1549709241655},{"_id":"public/archive/index.html","hash":"0257041345b50814c121b893a41b326c205f64af","modified":1549709241656},{"_id":"public/archives/index.html","hash":"504e7d98cf02f16935129783d7871123ad72bb55","modified":1549709241656},{"_id":"public/archives/2019/index.html","hash":"cfc67d402d2a97e2d98527f8e521bcfd578124dc","modified":1549709241656},{"_id":"public/archives/2019/02/index.html","hash":"b975af3c91425ced829d6540ac966014520ae8f1","modified":1549709241656},{"_id":"public/index.html","hash":"90560683374d920e05585b2944ffe3b9731a3e9d","modified":1549709241656},{"_id":"public/article/Frontend-Trend/index.html","hash":"6604d7dc55b530363e8be24c611157e480c56eb3","modified":1549709241656},{"_id":"public/CNAME","hash":"763d49e30214e81c14cda37f89a00bb0783682c2","modified":1549709241663},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1549709241663},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1549709241664},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1549709241664},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1549709241664},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1549709241664},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1549709241664},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1549709241664},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1549709241664},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1549709241836},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1549709241836},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1549709241842},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1549709241842},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1549709241842},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1549709241842},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1549709241842},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1549709241842},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1549709241842},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1549709241842},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1549709241842},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1549709241843},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1549709241843},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1549709241843},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1549709241843},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1549709241843},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1549709241843},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1549709241843},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1549709241848},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1549709241848},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1549709241848},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1549709241850},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1549709241851},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1549709241855},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1549709241855},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1549709241865},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1549709241865},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1549709241877},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1549709241880},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1549709241885},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1549709241890},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1549709241894},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1549709241898},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1549709241902},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1549709241909},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1549709241910},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1549709241913}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"지식이 없는 황무지","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"지식이 없는 황무지\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-02-09T07:27:16.713Z","updated":"2019-02-09T07:27:16.713Z","path":"404.html","title":"","comments":1,"_id":"cjrxcvbha0000b7gw5e3lkqob","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-02-09T03:00:00.000Z","description":"개발 잘하고 싶다","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 한마디\n\n> 컴퓨터는 잘못이 없습니다. 개발자님\n\n### 연락처\n\n> Email: cliche90@naver.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-02-09 12:00:00\ndescription: \"개발 잘하고 싶다\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 한마디\n\n> 컴퓨터는 잘못이 없습니다. 개발자님\n\n### 연락처\n\n> Email: cliche90@naver.com\n\n","updated":"2019-02-09T07:27:16.713Z","path":"about/index.html","comments":1,"_id":"cjrxcvbhn0001b7gw8spwov5w","content":"<h3 id=\"한마디\">한마디</h3>\n<blockquote>\n<p>컴퓨터는 잘못이 없습니다. 개발자님</p>\n</blockquote>\n<h3 id=\"연락처\">연락처</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:cliche90@naver.com\" target=\"_blank\" rel=\"noopener\">cliche90@naver.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>한마디</h3>\n<blockquote>\n<p>컴퓨터는 잘못이 없습니다. 개발자님</p>\n</blockquote>\n<h3>연락처</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:cliche90@naver.com\" target=\"_blank\" rel=\"noopener\">cliche90@naver.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T11:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-02-09T07:27:16.713Z","path":"archive/index.html","_id":"cjrxcvbho0002b7gwsybqwua6","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","date":"2019-02-09T07:27:16.737Z","updated":"2019-02-09T07:27:16.737Z","path":"tags/index.html","comments":1,"_id":"cjrxcvbhp0003b7gwlr6txprr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Frontend Trend","catalog":true,"date":"2019-02-08T19:17:53.000Z","subtitle":null,"header-img":null,"_content":"\n요즘 Frontend 기술이 너무 많이 쏟아지다보니 제가 아는 범주 내에서 무엇이 있는지 정도만 알아보려 합니다.\n\n## **Frontend**란 무엇을 말하는 것일까?\n> 사용자와 직접적으로 상호작용하는 부분 전부를 통틀어 이르는 말\n\n## 그렇다면 배우는 데에 어떤 문제가 있을까?\n> **너무 빠른 변화 속도**가 우리의 발목을 잡는다\n\n### 비교적 최근에 나온 프론트엔트 Tool, Framework, Library들\n- React.js\n- Vue.js\n- Angular.js\n- Backbone.js\n- Ember.js\n- Redux\n- GraphQL\n- Mobx\n- Vuex\n- React native\n- Vue native\n- Ionic native\n- Ionic4\n- Babel\n- Webpack\n- Grunt\n- Gulp\n- Meteor\n- Foundation\n- ....\n\n### 프론트엔트 언어(Javascript/html/css)의 파생언어 혹은 파생문법들\n- Sass\n- Less\n- JSX\n- Typescript\n- Nodejs\n- CoffeeScript\n- Elm\n- ...\n\n### JS의 ES6+ 로의 문법 변화\n- class\n- exports / imports\n- arrow function\n- ...\n\n\n> 발전이 빠른게 나쁜건 아니지만 너무 빠른것 같은데...\n\n\n## 그래도 선두에서 뛰는 녀석들은 있다.\n> 발전이 빠르다고 한들 사람들이 사랑하는 기술은 언제나 한정된 법입니다.\n>\n> 비교적 최근에 많은 사랑을 받은 기술들에 대해 개략적으로 소개합니다.\n>\n> 좀 더 많은 내용을 알고 싶다면 [stateofjs](https://stateofjs.com/)를 추천드립니다.\n\n### React.js\n- Frontend의 병목도 줄이고 싶어서 만들었어!\n\n### Vue.js\n- React.js 좋은것 같긴 한데 쓰기 드럽게 불편하지 않아?\n- 그리고 우리는 문서도 다 한글화 해 줌 ㅎㅎ\n\n### Angular\n- 데이터를 하나만 가지고 있으면 되지, 화면에 뿌리는거랑 저장하는거랑 왜 따로 씀?\n\n### GraphQL\n- ㅋㅋㅋㅋ REST API 아직도 씀?\n\n \n## 그럼 프론트엔드 기술의 선두주자들에 대해 알아보자\n\n### React.js\n- Facebook 형들이 만들어준 Javascript Library\n- 브라우저에 내용 수정할때마다 하는 일이 너무 많은데, 그냥 필요한 부분만 갈아치우면 안될까?\n- [소개 영상을 봅시다!!!](https://www.youtube.com/watch?v=muc2ZF0QIO4)\n- [2018년에 사랑받은 프레임워크들도 봅시다!!](https://insights.stackoverflow.com/survey/2018/#technology-most-loved-dreaded-and-wanted-frameworks-libraries-and-tools)\n\n- 왜 쓸까요?\n  - 변경사항을 확인하는 친구가 자신이 가진 Virtual DOM을 확인하고, 수정사항을 알려주어 수정부분만을 다시 그릴수 있도록 하는 것!\n  - 재사용할수 있는 포인트들을 Components 단위로 관리하기 때문에 쓰면 쓸수록 재사용이 많아진다.\n\n- 왜 쓰기 힘들다는 사람들이 많을까요?\n  - 특수한 문법(JSX)으로 인해, 매번 `babel` 이라는 친구를 통해 파일을 만들어주어야 합니다. 그런데 `babel`이라는 친구도 처음엔 어떻게 사용해야하는지 알기 쉽지 않습니다.\n  - `babel`을 가지고 매번 수정되는 내용을 화면에 `import` 해주는 것은 매우 귀찮으니, `babel-loader`를 통해 의존성을 확인하고 `webpack`을 통해 파일 하나로 묶어줘야 합니다.\n  - [그럼 기본 셋팅까지의 과정을 한번 해볼까요?](https://github.com/cliche90/react-boilerplate)\n  - 부모 컴포넌트와 자식 컴포넌트끼리만 데이터를 주고받을 수 있기 때문에 형제끼리 데이터가 오갈때는 동일한 조상이 있을때까지 거슬러 올라가야 하는 단점이 있습니다.\n  - CRA(create-react-app)가 많이 쓸만해 졌지만, 아무튼 시작할 때 사전지식으로 알아야 될 게 너무 많은게 현재까지도 문제가 됩니다.\n\n- 문제들에 대한 해결책들은 있나요?\n  - 일단 제일 문제는 부모와 자식간에만 데이터를 받는게 지속적으로 App의 복잡도를 올리기도 하고, 데이터 전송을 하고자 하는 컴포넌트들의 사이에 있는 모든 컴포넌트들에 다 새로 코드를 짜 줘야 한다는 단점.\n    - 그래서 나온게 Redux랑 Mobx입니다.\n    - 쉽게 말하면 모든 컴포넌트들의 선생님이 있는 셈으로, 컴포넌트가 무언가 상태값의 변화가 생길 경우 선생님에게 알려주고, 선생님은 그걸 듣고 해당 상태값이 필요한 다른 컴포넌트 친구에게 알려주는 식입니다.\n\n- 컴포넌트를 작성하고 이를 Mount 하는 방식으로 되어있습니다.\n    ```javascript\n    class HelloMessage extends React.Component {\n        render() {\n            return (\n                <div>\n                    Hello {this.props.name}\n                </div>\n            );\n        }\n    }\n\n    ReactDOM.render(\n        <HelloMessage name=\"Taylor\" />,\n        document.getElementById('hello-example')\n    );\n    ```\n\n### Vue.js\n- 역시 대륙의 형들답게, React.js의 장점만 가져오고, 사용성을 좀 더 높였습니다.\n- 대부분의 가이드가 영어로 되어있다 보니, 잘 되어있는 한글문서가 반가운 것도 어쩔수 없는 사실입니다.\n- 뷰(View) 부분만을 다루는 Javascript 프레임워크\n- html에 script를 import 하는 것만으로도도 사용 가능합니다. 좋은건 일단 다 해놓고 보는 듯한 느낌\n    ```html\n    <!-- index.html -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n    ```\n- React.js와 유사한 기능을 제공하는 데에 비해, React.js와는 달리 코드가 매우 간결한 것이 특징\n- 디렉티브도 있음습니다 (저는 별로 디렉티브를 좋아하지는 않지만, 필요할 경우에 쓸 수 있다는 것만으로도 큰 강점을 가집니다. 예를 들어 데이터 바인딩과 같은 것들이요)\n- 결국 결과물을 빨리 보고 싶고 단지 경량의 App을 만드는 것이라면 `Vue`, 그보다 좀 더 대규모에 적합한 개발을 할 경우에는 `React`를 사용하는 것이 일반적입니다.\n- 빠른 렌더링과 `React` 보다 작은 용량\n    - 요즘에는 성능차이는 그다지 나지 않는다고 합니다.\n- Template 기반의 코드 작성\n    ```html\n    <!-- html -->\n    <div id=\"app\">\n        {{ message }}\n    </div>\n    ```\n    ```javascript\n    // javascript\n    var app = new Vue({\n        el: '#app',\n        data: {\n            message: '안녕하세요 Vue!'\n        }\n    })\n    ```\n\n### Angular.js\n- 벌써 10살이 된 `Angular`는 현재 stable 버전 기준으로 `v7.2.4` 버전이 출시되었습니다.\n- 그리고 `Angular`도 훌륭한 한국어 문서를 제공합니다. 최신버전이 `v7.2.4`인데 `v7.2.0` 버전의 한글문서를 제공하는 것을 보면 업데이트도 빨라 보입니다.\n- 위에서 소개한 `React`나 `Vue`와는 달리 `typescript`를 사용합니다.\n- 사용자 경쟁에서 소외되지 않기 위해 `Angular`도 `create-react-app`이나 `vue cli`와 같이 `angular cli`를 제공합니다. 그저 커맨드라인을 몇 줄 치면 프로젝트 구성이 완료됩니다.\n    ```bash\n    # angular cli 설치\n    npm intall -g @angular/cli\n    # App 기본 코드 작성하기\n    ng new my-app\n    cd my-app\n    ng server --open\n    ```\n- 컴포넌트를 구성하는 요소들 중 `html`과 `typescript` 파일만 보면 아래와 같습니다.\n    ```html\n    <!-- src/app/app.component.html -->\n    <h1>\n        Welcome to {{ title }}!\n    </h1>\n    ```\n    ```typescript\n    // src/app/app.component.ts\n    @Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n        styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n       title = 'My First Angular App!';\n    }\n    ```\n- 단지 위와 같이 구성하는 것만으로 2-way data binding이 가능합니다.\n- 위에서 2-way binding을 가능케 하는 것은 출시 당시 가장 큰 강점으로 손꼽히던 것은 바로 MVVM(Model-View-ViewModel) 패턴입니다.\n    - 쉽게 말하면 MVC 패턴에서 Controller가 ViewModel로 바뀐 것입니다.\n    - Angular 공식에서는 MVW(Model-View-Whatever)라고 하네요.\n    - 결국 View에서 데이터가 수정되거나 Model에서 데이터가 수정되거나 중간에서 컨트롤러의 역할을 해 주는 ViewModel이 서로의 데이터를 갱신하도록 조정해 줍니다.\n\n### GraphQL\n- Anti-REST 진영의 대표주자\n- 여전히 REST를 완전히 대체하기는 어려워보임\n- 말은 Anti-Rest 지만 결국 기존의 Rest 보다 더 Restful을 지향한다고 볼 수 있음\n\n\n------------------------------------------------------------------\n\n\n## 브라우저 콘솔에서 쳐보면 ES6+의 문법이 작동하지 경우도 있던데?\n\n> 번들링(Bundling)이 필요합니다.\n\n- 번들링?\n  - 여러개의 js, jsx, sass, less 등의 파일들을 웹 브라우저가 해석할 수 있는 html, js, css 등으로 된 하나의 파일로 묶어주는 것\n  - 그리고 이러한 것을 해주는 과정 속에서 ES6를 사용할 수 있도록 코드 변경도 함께 일어납니다.\n\n## 번들링의 대표주자들\n\n### Webpack\n- 불과 1년 전 정도만 하더라도 `React`의 개발환경을 구성하기가 너무 힘들었기 때문에 대부분의 개발자들은 `Webpack`을 이용해 번들링을 했습니다.\n\n### Babel\n\n### Parcel\n- 비교적 신흥강자로 `babel`과 `webpack`이 불편함을 해소하고자 나온 것으로 보입니다.\n- 아직까지는 그다지 대세라거나 트렌디하다고 보기는 어렵기 때문에, 이런게 있다고만 알아두면 될 것 같습니다.\n\n\n------------------------------------------------------------------\n\n\n## Frontend는 지금도 변화한다\n\n### 모바일까지 진출한 Frontend 기술들\n- 그리고 이러한 Javascript의 저변 확대에 힘입어 모바일 역시도 Javascript를 통해 개발할 수 있게 되었습니다.\n- Node.js의 출시로 Frontend 개발만 하던 사람들도 비교적 쉽게 Backend의 개발을 할 수 있게 되면서 Javascript의 저변이 매우 넓어졌습니다.\n- 대표적으로 `React Native`, `Vue Native`, `Ionic Native` 등이 있습니다.\n- 위 기술들의 가장 큰 장점은 `Android`와 `iOS`의 구별없이 개발이 가능하다는 점입니다. 또한 `Xcode`나 `Android Studio`의 느려터진 빌드 없이도 바로 수정 결과를 거의 즉시 확인이 가능하기 때문에 생산성 측면에 있어서도 훌륭합니다.\n- 다들 웹 기술에 기반해 있기 때문에 나중에 웹으로의 확장도 어렵지 않습니다.\n- 그러나 장점만 있지는 않습니다. 제일 큰 것은 유지보수의 어려움입니다. 문제 발생시 이것이 어디서 난 문제인지 파악하기 어렵습니다.\n- 또 당연하다면 당연하지만 `Native`에 비해 라이브러리가 턱없이 부족하며, 자체적으로 지원하는 컴포넌트들이 아니고서야 복잡한 수정사항이 발생할 경우 결국 컴파일된 `Native Code` 에 손을 대야 할 것입니다.\n- 위와 같은 일이 있기 때문에 결국에는 `Native`에 대한 지식과 웹 기반 모바일 기술에 대한 지식이 모두 필요할 수 있습니다.\n- 그럼에도 불구하고 기존에 비해 훨씬 빠르게 개발이 가능하다보니 기술 도입을 떠나서 사용해보고 작성해보는 것은 나쁘지 않을 것이라고 생각합니다.\n- 위의 `Native` 기술들 말고도 `Hybrid App`이라는 분야가 존재하지만 개인적으는 앞으로도 계속 나올지는 모르겠습니다. 퍼포먼스가 매우 떨어지고, 개발 편의성도 다른 기술들에 비해 떨어지기 때문입니다.\n\n","source":"_posts/Frontend-Trend.md","raw":"---\ntitle: Frontend Trend\ncatalog: true\ndate: 2019-02-09 04:17:53\nsubtitle:\nheader-img:\ntags:\n---\n\n요즘 Frontend 기술이 너무 많이 쏟아지다보니 제가 아는 범주 내에서 무엇이 있는지 정도만 알아보려 합니다.\n\n## **Frontend**란 무엇을 말하는 것일까?\n> 사용자와 직접적으로 상호작용하는 부분 전부를 통틀어 이르는 말\n\n## 그렇다면 배우는 데에 어떤 문제가 있을까?\n> **너무 빠른 변화 속도**가 우리의 발목을 잡는다\n\n### 비교적 최근에 나온 프론트엔트 Tool, Framework, Library들\n- React.js\n- Vue.js\n- Angular.js\n- Backbone.js\n- Ember.js\n- Redux\n- GraphQL\n- Mobx\n- Vuex\n- React native\n- Vue native\n- Ionic native\n- Ionic4\n- Babel\n- Webpack\n- Grunt\n- Gulp\n- Meteor\n- Foundation\n- ....\n\n### 프론트엔트 언어(Javascript/html/css)의 파생언어 혹은 파생문법들\n- Sass\n- Less\n- JSX\n- Typescript\n- Nodejs\n- CoffeeScript\n- Elm\n- ...\n\n### JS의 ES6+ 로의 문법 변화\n- class\n- exports / imports\n- arrow function\n- ...\n\n\n> 발전이 빠른게 나쁜건 아니지만 너무 빠른것 같은데...\n\n\n## 그래도 선두에서 뛰는 녀석들은 있다.\n> 발전이 빠르다고 한들 사람들이 사랑하는 기술은 언제나 한정된 법입니다.\n>\n> 비교적 최근에 많은 사랑을 받은 기술들에 대해 개략적으로 소개합니다.\n>\n> 좀 더 많은 내용을 알고 싶다면 [stateofjs](https://stateofjs.com/)를 추천드립니다.\n\n### React.js\n- Frontend의 병목도 줄이고 싶어서 만들었어!\n\n### Vue.js\n- React.js 좋은것 같긴 한데 쓰기 드럽게 불편하지 않아?\n- 그리고 우리는 문서도 다 한글화 해 줌 ㅎㅎ\n\n### Angular\n- 데이터를 하나만 가지고 있으면 되지, 화면에 뿌리는거랑 저장하는거랑 왜 따로 씀?\n\n### GraphQL\n- ㅋㅋㅋㅋ REST API 아직도 씀?\n\n \n## 그럼 프론트엔드 기술의 선두주자들에 대해 알아보자\n\n### React.js\n- Facebook 형들이 만들어준 Javascript Library\n- 브라우저에 내용 수정할때마다 하는 일이 너무 많은데, 그냥 필요한 부분만 갈아치우면 안될까?\n- [소개 영상을 봅시다!!!](https://www.youtube.com/watch?v=muc2ZF0QIO4)\n- [2018년에 사랑받은 프레임워크들도 봅시다!!](https://insights.stackoverflow.com/survey/2018/#technology-most-loved-dreaded-and-wanted-frameworks-libraries-and-tools)\n\n- 왜 쓸까요?\n  - 변경사항을 확인하는 친구가 자신이 가진 Virtual DOM을 확인하고, 수정사항을 알려주어 수정부분만을 다시 그릴수 있도록 하는 것!\n  - 재사용할수 있는 포인트들을 Components 단위로 관리하기 때문에 쓰면 쓸수록 재사용이 많아진다.\n\n- 왜 쓰기 힘들다는 사람들이 많을까요?\n  - 특수한 문법(JSX)으로 인해, 매번 `babel` 이라는 친구를 통해 파일을 만들어주어야 합니다. 그런데 `babel`이라는 친구도 처음엔 어떻게 사용해야하는지 알기 쉽지 않습니다.\n  - `babel`을 가지고 매번 수정되는 내용을 화면에 `import` 해주는 것은 매우 귀찮으니, `babel-loader`를 통해 의존성을 확인하고 `webpack`을 통해 파일 하나로 묶어줘야 합니다.\n  - [그럼 기본 셋팅까지의 과정을 한번 해볼까요?](https://github.com/cliche90/react-boilerplate)\n  - 부모 컴포넌트와 자식 컴포넌트끼리만 데이터를 주고받을 수 있기 때문에 형제끼리 데이터가 오갈때는 동일한 조상이 있을때까지 거슬러 올라가야 하는 단점이 있습니다.\n  - CRA(create-react-app)가 많이 쓸만해 졌지만, 아무튼 시작할 때 사전지식으로 알아야 될 게 너무 많은게 현재까지도 문제가 됩니다.\n\n- 문제들에 대한 해결책들은 있나요?\n  - 일단 제일 문제는 부모와 자식간에만 데이터를 받는게 지속적으로 App의 복잡도를 올리기도 하고, 데이터 전송을 하고자 하는 컴포넌트들의 사이에 있는 모든 컴포넌트들에 다 새로 코드를 짜 줘야 한다는 단점.\n    - 그래서 나온게 Redux랑 Mobx입니다.\n    - 쉽게 말하면 모든 컴포넌트들의 선생님이 있는 셈으로, 컴포넌트가 무언가 상태값의 변화가 생길 경우 선생님에게 알려주고, 선생님은 그걸 듣고 해당 상태값이 필요한 다른 컴포넌트 친구에게 알려주는 식입니다.\n\n- 컴포넌트를 작성하고 이를 Mount 하는 방식으로 되어있습니다.\n    ```javascript\n    class HelloMessage extends React.Component {\n        render() {\n            return (\n                <div>\n                    Hello {this.props.name}\n                </div>\n            );\n        }\n    }\n\n    ReactDOM.render(\n        <HelloMessage name=\"Taylor\" />,\n        document.getElementById('hello-example')\n    );\n    ```\n\n### Vue.js\n- 역시 대륙의 형들답게, React.js의 장점만 가져오고, 사용성을 좀 더 높였습니다.\n- 대부분의 가이드가 영어로 되어있다 보니, 잘 되어있는 한글문서가 반가운 것도 어쩔수 없는 사실입니다.\n- 뷰(View) 부분만을 다루는 Javascript 프레임워크\n- html에 script를 import 하는 것만으로도도 사용 가능합니다. 좋은건 일단 다 해놓고 보는 듯한 느낌\n    ```html\n    <!-- index.html -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n    ```\n- React.js와 유사한 기능을 제공하는 데에 비해, React.js와는 달리 코드가 매우 간결한 것이 특징\n- 디렉티브도 있음습니다 (저는 별로 디렉티브를 좋아하지는 않지만, 필요할 경우에 쓸 수 있다는 것만으로도 큰 강점을 가집니다. 예를 들어 데이터 바인딩과 같은 것들이요)\n- 결국 결과물을 빨리 보고 싶고 단지 경량의 App을 만드는 것이라면 `Vue`, 그보다 좀 더 대규모에 적합한 개발을 할 경우에는 `React`를 사용하는 것이 일반적입니다.\n- 빠른 렌더링과 `React` 보다 작은 용량\n    - 요즘에는 성능차이는 그다지 나지 않는다고 합니다.\n- Template 기반의 코드 작성\n    ```html\n    <!-- html -->\n    <div id=\"app\">\n        {{ message }}\n    </div>\n    ```\n    ```javascript\n    // javascript\n    var app = new Vue({\n        el: '#app',\n        data: {\n            message: '안녕하세요 Vue!'\n        }\n    })\n    ```\n\n### Angular.js\n- 벌써 10살이 된 `Angular`는 현재 stable 버전 기준으로 `v7.2.4` 버전이 출시되었습니다.\n- 그리고 `Angular`도 훌륭한 한국어 문서를 제공합니다. 최신버전이 `v7.2.4`인데 `v7.2.0` 버전의 한글문서를 제공하는 것을 보면 업데이트도 빨라 보입니다.\n- 위에서 소개한 `React`나 `Vue`와는 달리 `typescript`를 사용합니다.\n- 사용자 경쟁에서 소외되지 않기 위해 `Angular`도 `create-react-app`이나 `vue cli`와 같이 `angular cli`를 제공합니다. 그저 커맨드라인을 몇 줄 치면 프로젝트 구성이 완료됩니다.\n    ```bash\n    # angular cli 설치\n    npm intall -g @angular/cli\n    # App 기본 코드 작성하기\n    ng new my-app\n    cd my-app\n    ng server --open\n    ```\n- 컴포넌트를 구성하는 요소들 중 `html`과 `typescript` 파일만 보면 아래와 같습니다.\n    ```html\n    <!-- src/app/app.component.html -->\n    <h1>\n        Welcome to {{ title }}!\n    </h1>\n    ```\n    ```typescript\n    // src/app/app.component.ts\n    @Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n        styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n       title = 'My First Angular App!';\n    }\n    ```\n- 단지 위와 같이 구성하는 것만으로 2-way data binding이 가능합니다.\n- 위에서 2-way binding을 가능케 하는 것은 출시 당시 가장 큰 강점으로 손꼽히던 것은 바로 MVVM(Model-View-ViewModel) 패턴입니다.\n    - 쉽게 말하면 MVC 패턴에서 Controller가 ViewModel로 바뀐 것입니다.\n    - Angular 공식에서는 MVW(Model-View-Whatever)라고 하네요.\n    - 결국 View에서 데이터가 수정되거나 Model에서 데이터가 수정되거나 중간에서 컨트롤러의 역할을 해 주는 ViewModel이 서로의 데이터를 갱신하도록 조정해 줍니다.\n\n### GraphQL\n- Anti-REST 진영의 대표주자\n- 여전히 REST를 완전히 대체하기는 어려워보임\n- 말은 Anti-Rest 지만 결국 기존의 Rest 보다 더 Restful을 지향한다고 볼 수 있음\n\n\n------------------------------------------------------------------\n\n\n## 브라우저 콘솔에서 쳐보면 ES6+의 문법이 작동하지 경우도 있던데?\n\n> 번들링(Bundling)이 필요합니다.\n\n- 번들링?\n  - 여러개의 js, jsx, sass, less 등의 파일들을 웹 브라우저가 해석할 수 있는 html, js, css 등으로 된 하나의 파일로 묶어주는 것\n  - 그리고 이러한 것을 해주는 과정 속에서 ES6를 사용할 수 있도록 코드 변경도 함께 일어납니다.\n\n## 번들링의 대표주자들\n\n### Webpack\n- 불과 1년 전 정도만 하더라도 `React`의 개발환경을 구성하기가 너무 힘들었기 때문에 대부분의 개발자들은 `Webpack`을 이용해 번들링을 했습니다.\n\n### Babel\n\n### Parcel\n- 비교적 신흥강자로 `babel`과 `webpack`이 불편함을 해소하고자 나온 것으로 보입니다.\n- 아직까지는 그다지 대세라거나 트렌디하다고 보기는 어렵기 때문에, 이런게 있다고만 알아두면 될 것 같습니다.\n\n\n------------------------------------------------------------------\n\n\n## Frontend는 지금도 변화한다\n\n### 모바일까지 진출한 Frontend 기술들\n- 그리고 이러한 Javascript의 저변 확대에 힘입어 모바일 역시도 Javascript를 통해 개발할 수 있게 되었습니다.\n- Node.js의 출시로 Frontend 개발만 하던 사람들도 비교적 쉽게 Backend의 개발을 할 수 있게 되면서 Javascript의 저변이 매우 넓어졌습니다.\n- 대표적으로 `React Native`, `Vue Native`, `Ionic Native` 등이 있습니다.\n- 위 기술들의 가장 큰 장점은 `Android`와 `iOS`의 구별없이 개발이 가능하다는 점입니다. 또한 `Xcode`나 `Android Studio`의 느려터진 빌드 없이도 바로 수정 결과를 거의 즉시 확인이 가능하기 때문에 생산성 측면에 있어서도 훌륭합니다.\n- 다들 웹 기술에 기반해 있기 때문에 나중에 웹으로의 확장도 어렵지 않습니다.\n- 그러나 장점만 있지는 않습니다. 제일 큰 것은 유지보수의 어려움입니다. 문제 발생시 이것이 어디서 난 문제인지 파악하기 어렵습니다.\n- 또 당연하다면 당연하지만 `Native`에 비해 라이브러리가 턱없이 부족하며, 자체적으로 지원하는 컴포넌트들이 아니고서야 복잡한 수정사항이 발생할 경우 결국 컴파일된 `Native Code` 에 손을 대야 할 것입니다.\n- 위와 같은 일이 있기 때문에 결국에는 `Native`에 대한 지식과 웹 기반 모바일 기술에 대한 지식이 모두 필요할 수 있습니다.\n- 그럼에도 불구하고 기존에 비해 훨씬 빠르게 개발이 가능하다보니 기술 도입을 떠나서 사용해보고 작성해보는 것은 나쁘지 않을 것이라고 생각합니다.\n- 위의 `Native` 기술들 말고도 `Hybrid App`이라는 분야가 존재하지만 개인적으는 앞으로도 계속 나올지는 모르겠습니다. 퍼포먼스가 매우 떨어지고, 개발 편의성도 다른 기술들에 비해 떨어지기 때문입니다.\n\n","slug":"Frontend-Trend","published":1,"updated":"2019-02-09T10:47:00.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrxcvbhz0004b7gwl2gyf3wr","content":"<p>요즘 Frontend 기술이 너무 많이 쏟아지다보니 제가 아는 범주 내에서 무엇이 있는지 정도만 알아보려 합니다.</p>\n<h2 id=\"frontend란-무엇을-말하는-것일까\"><strong>Frontend</strong>란 무엇을 말하는 것일까?</h2>\n<blockquote>\n<p>사용자와 직접적으로 상호작용하는 부분 전부를 통틀어 이르는 말</p>\n</blockquote>\n<h2 id=\"그렇다면-배우는-데에-어떤-문제가-있을까\">그렇다면 배우는 데에 어떤 문제가 있을까?</h2>\n<blockquote>\n<p><strong>너무 빠른 변화 속도</strong>가 우리의 발목을 잡는다</p>\n</blockquote>\n<h3 id=\"비교적-최근에-나온-프론트엔트-tool-framework-library들\">비교적 최근에 나온 프론트엔트 Tool, Framework, Library들</h3>\n<ul>\n<li>React.js</li>\n<li>Vue.js</li>\n<li>Angular.js</li>\n<li>Backbone.js</li>\n<li>Ember.js</li>\n<li>Redux</li>\n<li>GraphQL</li>\n<li>Mobx</li>\n<li>Vuex</li>\n<li>React native</li>\n<li>Vue native</li>\n<li>Ionic native</li>\n<li>Ionic4</li>\n<li>Babel</li>\n<li>Webpack</li>\n<li>Grunt</li>\n<li>Gulp</li>\n<li>Meteor</li>\n<li>Foundation</li>\n<li>…</li>\n</ul>\n<h3 id=\"프론트엔트-언어javascripthtmlcss의-파생언어-혹은-파생문법들\">프론트엔트 언어(Javascript/html/css)의 파생언어 혹은 파생문법들</h3>\n<ul>\n<li>Sass</li>\n<li>Less</li>\n<li>JSX</li>\n<li>Typescript</li>\n<li>Nodejs</li>\n<li>CoffeeScript</li>\n<li>Elm</li>\n<li>…</li>\n</ul>\n<h3 id=\"js의-es6-로의-문법-변화\">JS의 ES6+ 로의 문법 변화</h3>\n<ul>\n<li>class</li>\n<li>exports / imports</li>\n<li>arrow function</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>발전이 빠른게 나쁜건 아니지만 너무 빠른것 같은데…</p>\n</blockquote>\n<h2 id=\"그래도-선두에서-뛰는-녀석들은-있다\">그래도 선두에서 뛰는 녀석들은 있다.</h2>\n<blockquote>\n<p>발전이 빠르다고 한들 사람들이 사랑하는 기술은 언제나 한정된 법입니다.</p>\n<p>비교적 최근에 많은 사랑을 받은 기술들에 대해 개략적으로 소개합니다.</p>\n<p>좀 더 많은 내용을 알고 싶다면 <a href=\"https://stateofjs.com/\" target=\"_blank\" rel=\"noopener\">stateofjs</a>를 추천드립니다.</p>\n</blockquote>\n<h3 id=\"reactjs\">React.js</h3>\n<ul>\n<li>Frontend의 병목도 줄이고 싶어서 만들었어!</li>\n</ul>\n<h3 id=\"vuejs\">Vue.js</h3>\n<ul>\n<li>React.js 좋은것 같긴 한데 쓰기 드럽게 불편하지 않아?</li>\n<li>그리고 우리는 문서도 다 한글화 해 줌 ㅎㅎ</li>\n</ul>\n<h3 id=\"angular\">Angular</h3>\n<ul>\n<li>데이터를 하나만 가지고 있으면 되지, 화면에 뿌리는거랑 저장하는거랑 왜 따로 씀?</li>\n</ul>\n<h3 id=\"graphql\">GraphQL</h3>\n<ul>\n<li>ㅋㅋㅋㅋ REST API 아직도 씀?</li>\n</ul>\n<h2 id=\"그럼-프론트엔드-기술의-선두주자들에-대해-알아보자\">그럼 프론트엔드 기술의 선두주자들에 대해 알아보자</h2>\n<h3 id=\"reactjs\">React.js</h3>\n<ul>\n<li>\n<p>Facebook 형들이 만들어준 Javascript Library</p>\n</li>\n<li>\n<p>브라우저에 내용 수정할때마다 하는 일이 너무 많은데, 그냥 필요한 부분만 갈아치우면 안될까?</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=muc2ZF0QIO4\" target=\"_blank\" rel=\"noopener\">소개 영상을 봅시다!!!</a></p>\n</li>\n<li>\n<p><a href=\"https://insights.stackoverflow.com/survey/2018/#technology-most-loved-dreaded-and-wanted-frameworks-libraries-and-tools\" target=\"_blank\" rel=\"noopener\">2018년에 사랑받은 프레임워크들도 봅시다!!</a></p>\n</li>\n<li>\n<p>왜 쓸까요?</p>\n<ul>\n<li>변경사항을 확인하는 친구가 자신이 가진 Virtual DOM을 확인하고, 수정사항을 알려주어 수정부분만을 다시 그릴수 있도록 하는 것!</li>\n<li>재사용할수 있는 포인트들을 Components 단위로 관리하기 때문에 쓰면 쓸수록 재사용이 많아진다.</li>\n</ul>\n</li>\n<li>\n<p>왜 쓰기 힘들다는 사람들이 많을까요?</p>\n<ul>\n<li>특수한 문법(JSX)으로 인해, 매번 <code>babel</code> 이라는 친구를 통해 파일을 만들어주어야 합니다. 그런데 <code>babel</code>이라는 친구도 처음엔 어떻게 사용해야하는지 알기 쉽지 않습니다.</li>\n<li><code>babel</code>을 가지고 매번 수정되는 내용을 화면에 <code>import</code> 해주는 것은 매우 귀찮으니, <code>babel-loader</code>를 통해 의존성을 확인하고 <code>webpack</code>을 통해 파일 하나로 묶어줘야 합니다.</li>\n<li><a href=\"https://github.com/cliche90/react-boilerplate\" target=\"_blank\" rel=\"noopener\">그럼 기본 셋팅까지의 과정을 한번 해볼까요?</a></li>\n<li>부모 컴포넌트와 자식 컴포넌트끼리만 데이터를 주고받을 수 있기 때문에 형제끼리 데이터가 오갈때는 동일한 조상이 있을때까지 거슬러 올라가야 하는 단점이 있습니다.</li>\n<li>CRA(create-react-app)가 많이 쓸만해 졌지만, 아무튼 시작할 때 사전지식으로 알아야 될 게 너무 많은게 현재까지도 문제가 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>문제들에 대한 해결책들은 있나요?</p>\n<ul>\n<li>일단 제일 문제는 부모와 자식간에만 데이터를 받는게 지속적으로 App의 복잡도를 올리기도 하고, 데이터 전송을 하고자 하는 컴포넌트들의 사이에 있는 모든 컴포넌트들에 다 새로 코드를 짜 줘야 한다는 단점.\n<ul>\n<li>그래서 나온게 Redux랑 Mobx입니다.</li>\n<li>쉽게 말하면 모든 컴포넌트들의 선생님이 있는 셈으로, 컴포넌트가 무언가 상태값의 변화가 생길 경우 선생님에게 알려주고, 선생님은 그걸 듣고 해당 상태값이 필요한 다른 컴포넌트 친구에게 알려주는 식입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>컴포넌트를 작성하고 이를 Mount 하는 방식으로 되어있습니다.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloMessage</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                Hello &#123;<span class=\"keyword\">this</span>.props.name&#125;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;HelloMessage name=\"Taylor\" /</span>&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello-example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vuejs\">Vue.js</h3>\n<ul>\n<li>\n<p>역시 대륙의 형들답게, React.js의 장점만 가져오고, 사용성을 좀 더 높였습니다.</p>\n</li>\n<li>\n<p>대부분의 가이드가 영어로 되어있다 보니, 잘 되어있는 한글문서가 반가운 것도 어쩔수 없는 사실입니다.</p>\n</li>\n<li>\n<p>뷰(View) 부분만을 다루는 Javascript 프레임워크</p>\n</li>\n<li>\n<p>html에 script를 import 하는 것만으로도도 사용 가능합니다. 좋은건 일단 다 해놓고 보는 듯한 느낌</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>React.js와 유사한 기능을 제공하는 데에 비해, React.js와는 달리 코드가 매우 간결한 것이 특징</p>\n</li>\n<li>\n<p>디렉티브도 있음습니다 (저는 별로 디렉티브를 좋아하지는 않지만, 필요할 경우에 쓸 수 있다는 것만으로도 큰 강점을 가집니다. 예를 들어 데이터 바인딩과 같은 것들이요)</p>\n</li>\n<li>\n<p>결국 결과물을 빨리 보고 싶고 단지 경량의 App을 만드는 것이라면 <code>Vue</code>, 그보다 좀 더 대규모에 적합한 개발을 할 경우에는 <code>React</code>를 사용하는 것이 일반적입니다.</p>\n</li>\n<li>\n<p>빠른 렌더링과 <code>React</code> 보다 작은 용량</p>\n<ul>\n<li>요즘에는 성능차이는 그다지 나지 않는다고 합니다.</li>\n</ul>\n</li>\n<li>\n<p>Template 기반의 코드 작성</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'안녕하세요 Vue!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"angularjs\">Angular.js</h3>\n<ul>\n<li>\n<p>벌써 10살이 된 <code>Angular</code>는 현재 stable 버전 기준으로 <code>v7.2.4</code> 버전이 출시되었습니다.</p>\n</li>\n<li>\n<p>그리고 <code>Angular</code>도 훌륭한 한국어 문서를 제공합니다. 최신버전이 <code>v7.2.4</code>인데 <code>v7.2.0</code> 버전의 한글문서를 제공하는 것을 보면 업데이트도 빨라 보입니다.</p>\n</li>\n<li>\n<p>위에서 소개한 <code>React</code>나 <code>Vue</code>와는 달리 <code>typescript</code>를 사용합니다.</p>\n</li>\n<li>\n<p>사용자 경쟁에서 소외되지 않기 위해 <code>Angular</code>도 <code>create-react-app</code>이나 <code>vue cli</code>와 같이 <code>angular cli</code>를 제공합니다. 그저 커맨드라인을 몇 줄 치면 프로젝트 구성이 완료됩니다.</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># angular cli 설치</span></span><br><span class=\"line\">npm intall -g @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># App 기본 코드 작성하기</span></span><br><span class=\"line\">ng new my-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-app</span><br><span class=\"line\">ng server --open</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>컴포넌트를 구성하는 요소들 중 <code>html</code>과 <code>typescript</code> 파일만 보면 아래와 같습니다.</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/app/app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    Welcome to &#123;&#123; title &#125;&#125;!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/app/app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">   title = <span class=\"string\">'My First Angular App!'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>단지 위와 같이 구성하는 것만으로 2-way data binding이 가능합니다.</p>\n</li>\n<li>\n<p>위에서 2-way binding을 가능케 하는 것은 출시 당시 가장 큰 강점으로 손꼽히던 것은 바로 MVVM(Model-View-ViewModel) 패턴입니다.</p>\n<ul>\n<li>쉽게 말하면 MVC 패턴에서 Controller가 ViewModel로 바뀐 것입니다.</li>\n<li>Angular 공식에서는 MVW(Model-View-Whatever)라고 하네요.</li>\n<li>결국 View에서 데이터가 수정되거나 Model에서 데이터가 수정되거나 중간에서 컨트롤러의 역할을 해 주는 ViewModel이 서로의 데이터를 갱신하도록 조정해 줍니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"graphql\">GraphQL</h3>\n<ul>\n<li>Anti-REST 진영의 대표주자</li>\n<li>여전히 REST를 완전히 대체하기는 어려워보임</li>\n<li>말은 Anti-Rest 지만 결국 기존의 Rest 보다 더 Restful을 지향한다고 볼 수 있음</li>\n</ul>\n<hr>\n<h2 id=\"브라우저-콘솔에서-쳐보면-es6의-문법이-작동하지-경우도-있던데\">브라우저 콘솔에서 쳐보면 ES6+의 문법이 작동하지 경우도 있던데?</h2>\n<blockquote>\n<p>번들링(Bundling)이 필요합니다.</p>\n</blockquote>\n<ul>\n<li>번들링?\n<ul>\n<li>여러개의 js, jsx, sass, less 등의 파일들을 웹 브라우저가 해석할 수 있는 html, js, css 등으로 된 하나의 파일로 묶어주는 것</li>\n<li>그리고 이러한 것을 해주는 과정 속에서 ES6를 사용할 수 있도록 코드 변경도 함께 일어납니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"번들링의-대표주자들\">번들링의 대표주자들</h2>\n<h3 id=\"webpack\">Webpack</h3>\n<ul>\n<li>불과 1년 전 정도만 하더라도 <code>React</code>의 개발환경을 구성하기가 너무 힘들었기 때문에 대부분의 개발자들은 <code>Webpack</code>을 이용해 번들링을 했습니다.</li>\n</ul>\n<h3 id=\"babel\">Babel</h3>\n<h3 id=\"parcel\">Parcel</h3>\n<ul>\n<li>비교적 신흥강자로 <code>babel</code>과 <code>webpack</code>이 불편함을 해소하고자 나온 것으로 보입니다.</li>\n<li>아직까지는 그다지 대세라거나 트렌디하다고 보기는 어렵기 때문에, 이런게 있다고만 알아두면 될 것 같습니다.</li>\n</ul>\n<hr>\n<h2 id=\"frontend는-지금도-변화한다\">Frontend는 지금도 변화한다</h2>\n<h3 id=\"모바일까지-진출한-frontend-기술들\">모바일까지 진출한 Frontend 기술들</h3>\n<ul>\n<li>그리고 이러한 Javascript의 저변 확대에 힘입어 모바일 역시도 Javascript를 통해 개발할 수 있게 되었습니다.</li>\n<li>Node.js의 출시로 Frontend 개발만 하던 사람들도 비교적 쉽게 Backend의 개발을 할 수 있게 되면서 Javascript의 저변이 매우 넓어졌습니다.</li>\n<li>대표적으로 <code>React Native</code>, <code>Vue Native</code>, <code>Ionic Native</code> 등이 있습니다.</li>\n<li>위 기술들의 가장 큰 장점은 <code>Android</code>와 <code>iOS</code>의 구별없이 개발이 가능하다는 점입니다. 또한 <code>Xcode</code>나 <code>Android Studio</code>의 느려터진 빌드 없이도 바로 수정 결과를 거의 즉시 확인이 가능하기 때문에 생산성 측면에 있어서도 훌륭합니다.</li>\n<li>다들 웹 기술에 기반해 있기 때문에 나중에 웹으로의 확장도 어렵지 않습니다.</li>\n<li>그러나 장점만 있지는 않습니다. 제일 큰 것은 유지보수의 어려움입니다. 문제 발생시 이것이 어디서 난 문제인지 파악하기 어렵습니다.</li>\n<li>또 당연하다면 당연하지만 <code>Native</code>에 비해 라이브러리가 턱없이 부족하며, 자체적으로 지원하는 컴포넌트들이 아니고서야 복잡한 수정사항이 발생할 경우 결국 컴파일된 <code>Native Code</code> 에 손을 대야 할 것입니다.</li>\n<li>위와 같은 일이 있기 때문에 결국에는 <code>Native</code>에 대한 지식과 웹 기반 모바일 기술에 대한 지식이 모두 필요할 수 있습니다.</li>\n<li>그럼에도 불구하고 기존에 비해 훨씬 빠르게 개발이 가능하다보니 기술 도입을 떠나서 사용해보고 작성해보는 것은 나쁘지 않을 것이라고 생각합니다.</li>\n<li>위의 <code>Native</code> 기술들 말고도 <code>Hybrid App</code>이라는 분야가 존재하지만 개인적으는 앞으로도 계속 나올지는 모르겠습니다. 퍼포먼스가 매우 떨어지고, 개발 편의성도 다른 기술들에 비해 떨어지기 때문입니다.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>요즘 Frontend 기술이 너무 많이 쏟아지다보니 제가 아는 범주 내에서 무엇이 있는지 정도만 알아보려 합니다.</p>\n<h2><strong>Frontend</strong>란 무엇을 말하는 것일까?</h2>\n<blockquote>\n<p>사용자와 직접적으로 상호작용하는 부분 전부를 통틀어 이르는 말</p>\n</blockquote>\n<h2>그렇다면 배우는 데에 어떤 문제가 있을까?</h2>\n<blockquote>\n<p><strong>너무 빠른 변화 속도</strong>가 우리의 발목을 잡는다</p>\n</blockquote>\n<h3>비교적 최근에 나온 프론트엔트 Tool, Framework, Library들</h3>\n<ul>\n<li>React.js</li>\n<li>Vue.js</li>\n<li>Angular.js</li>\n<li>Backbone.js</li>\n<li>Ember.js</li>\n<li>Redux</li>\n<li>GraphQL</li>\n<li>Mobx</li>\n<li>Vuex</li>\n<li>React native</li>\n<li>Vue native</li>\n<li>Ionic native</li>\n<li>Ionic4</li>\n<li>Babel</li>\n<li>Webpack</li>\n<li>Grunt</li>\n<li>Gulp</li>\n<li>Meteor</li>\n<li>Foundation</li>\n<li>…</li>\n</ul>\n<h3>프론트엔트 언어(Javascript/html/css)의 파생언어 혹은 파생문법들</h3>\n<ul>\n<li>Sass</li>\n<li>Less</li>\n<li>JSX</li>\n<li>Typescript</li>\n<li>Nodejs</li>\n<li>CoffeeScript</li>\n<li>Elm</li>\n<li>…</li>\n</ul>\n<h3>JS의 ES6+ 로의 문법 변화</h3>\n<ul>\n<li>class</li>\n<li>exports / imports</li>\n<li>arrow function</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>발전이 빠른게 나쁜건 아니지만 너무 빠른것 같은데…</p>\n</blockquote>\n<h2>그래도 선두에서 뛰는 녀석들은 있다.</h2>\n<blockquote>\n<p>발전이 빠르다고 한들 사람들이 사랑하는 기술은 언제나 한정된 법입니다.</p>\n<p>비교적 최근에 많은 사랑을 받은 기술들에 대해 개략적으로 소개합니다.</p>\n<p>좀 더 많은 내용을 알고 싶다면 <a href=\"https://stateofjs.com/\" target=\"_blank\" rel=\"noopener\">stateofjs</a>를 추천드립니다.</p>\n</blockquote>\n<h3>React.js</h3>\n<ul>\n<li>Frontend의 병목도 줄이고 싶어서 만들었어!</li>\n</ul>\n<h3>Vue.js</h3>\n<ul>\n<li>React.js 좋은것 같긴 한데 쓰기 드럽게 불편하지 않아?</li>\n<li>그리고 우리는 문서도 다 한글화 해 줌 ㅎㅎ</li>\n</ul>\n<h3>Angular</h3>\n<ul>\n<li>데이터를 하나만 가지고 있으면 되지, 화면에 뿌리는거랑 저장하는거랑 왜 따로 씀?</li>\n</ul>\n<h3>GraphQL</h3>\n<ul>\n<li>ㅋㅋㅋㅋ REST API 아직도 씀?</li>\n</ul>\n<h2>그럼 프론트엔드 기술의 선두주자들에 대해 알아보자</h2>\n<h3>React.js</h3>\n<ul>\n<li>\n<p>Facebook 형들이 만들어준 Javascript Library</p>\n</li>\n<li>\n<p>브라우저에 내용 수정할때마다 하는 일이 너무 많은데, 그냥 필요한 부분만 갈아치우면 안될까?</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=muc2ZF0QIO4\" target=\"_blank\" rel=\"noopener\">소개 영상을 봅시다!!!</a></p>\n</li>\n<li>\n<p><a href=\"https://insights.stackoverflow.com/survey/2018/#technology-most-loved-dreaded-and-wanted-frameworks-libraries-and-tools\" target=\"_blank\" rel=\"noopener\">2018년에 사랑받은 프레임워크들도 봅시다!!</a></p>\n</li>\n<li>\n<p>왜 쓸까요?</p>\n<ul>\n<li>변경사항을 확인하는 친구가 자신이 가진 Virtual DOM을 확인하고, 수정사항을 알려주어 수정부분만을 다시 그릴수 있도록 하는 것!</li>\n<li>재사용할수 있는 포인트들을 Components 단위로 관리하기 때문에 쓰면 쓸수록 재사용이 많아진다.</li>\n</ul>\n</li>\n<li>\n<p>왜 쓰기 힘들다는 사람들이 많을까요?</p>\n<ul>\n<li>특수한 문법(JSX)으로 인해, 매번 <code>babel</code> 이라는 친구를 통해 파일을 만들어주어야 합니다. 그런데 <code>babel</code>이라는 친구도 처음엔 어떻게 사용해야하는지 알기 쉽지 않습니다.</li>\n<li><code>babel</code>을 가지고 매번 수정되는 내용을 화면에 <code>import</code> 해주는 것은 매우 귀찮으니, <code>babel-loader</code>를 통해 의존성을 확인하고 <code>webpack</code>을 통해 파일 하나로 묶어줘야 합니다.</li>\n<li><a href=\"https://github.com/cliche90/react-boilerplate\" target=\"_blank\" rel=\"noopener\">그럼 기본 셋팅까지의 과정을 한번 해볼까요?</a></li>\n<li>부모 컴포넌트와 자식 컴포넌트끼리만 데이터를 주고받을 수 있기 때문에 형제끼리 데이터가 오갈때는 동일한 조상이 있을때까지 거슬러 올라가야 하는 단점이 있습니다.</li>\n<li>CRA(create-react-app)가 많이 쓸만해 졌지만, 아무튼 시작할 때 사전지식으로 알아야 될 게 너무 많은게 현재까지도 문제가 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>문제들에 대한 해결책들은 있나요?</p>\n<ul>\n<li>일단 제일 문제는 부모와 자식간에만 데이터를 받는게 지속적으로 App의 복잡도를 올리기도 하고, 데이터 전송을 하고자 하는 컴포넌트들의 사이에 있는 모든 컴포넌트들에 다 새로 코드를 짜 줘야 한다는 단점.\n<ul>\n<li>그래서 나온게 Redux랑 Mobx입니다.</li>\n<li>쉽게 말하면 모든 컴포넌트들의 선생님이 있는 셈으로, 컴포넌트가 무언가 상태값의 변화가 생길 경우 선생님에게 알려주고, 선생님은 그걸 듣고 해당 상태값이 필요한 다른 컴포넌트 친구에게 알려주는 식입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>컴포넌트를 작성하고 이를 Mount 하는 방식으로 되어있습니다.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloMessage</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                Hello &#123;<span class=\"keyword\">this</span>.props.name&#125;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;HelloMessage name=\"Taylor\" /</span>&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello-example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3>Vue.js</h3>\n<ul>\n<li>\n<p>역시 대륙의 형들답게, React.js의 장점만 가져오고, 사용성을 좀 더 높였습니다.</p>\n</li>\n<li>\n<p>대부분의 가이드가 영어로 되어있다 보니, 잘 되어있는 한글문서가 반가운 것도 어쩔수 없는 사실입니다.</p>\n</li>\n<li>\n<p>뷰(View) 부분만을 다루는 Javascript 프레임워크</p>\n</li>\n<li>\n<p>html에 script를 import 하는 것만으로도도 사용 가능합니다. 좋은건 일단 다 해놓고 보는 듯한 느낌</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>React.js와 유사한 기능을 제공하는 데에 비해, React.js와는 달리 코드가 매우 간결한 것이 특징</p>\n</li>\n<li>\n<p>디렉티브도 있음습니다 (저는 별로 디렉티브를 좋아하지는 않지만, 필요할 경우에 쓸 수 있다는 것만으로도 큰 강점을 가집니다. 예를 들어 데이터 바인딩과 같은 것들이요)</p>\n</li>\n<li>\n<p>결국 결과물을 빨리 보고 싶고 단지 경량의 App을 만드는 것이라면 <code>Vue</code>, 그보다 좀 더 대규모에 적합한 개발을 할 경우에는 <code>React</code>를 사용하는 것이 일반적입니다.</p>\n</li>\n<li>\n<p>빠른 렌더링과 <code>React</code> 보다 작은 용량</p>\n<ul>\n<li>요즘에는 성능차이는 그다지 나지 않는다고 합니다.</li>\n</ul>\n</li>\n<li>\n<p>Template 기반의 코드 작성</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'안녕하세요 Vue!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3>Angular.js</h3>\n<ul>\n<li>\n<p>벌써 10살이 된 <code>Angular</code>는 현재 stable 버전 기준으로 <code>v7.2.4</code> 버전이 출시되었습니다.</p>\n</li>\n<li>\n<p>그리고 <code>Angular</code>도 훌륭한 한국어 문서를 제공합니다. 최신버전이 <code>v7.2.4</code>인데 <code>v7.2.0</code> 버전의 한글문서를 제공하는 것을 보면 업데이트도 빨라 보입니다.</p>\n</li>\n<li>\n<p>위에서 소개한 <code>React</code>나 <code>Vue</code>와는 달리 <code>typescript</code>를 사용합니다.</p>\n</li>\n<li>\n<p>사용자 경쟁에서 소외되지 않기 위해 <code>Angular</code>도 <code>create-react-app</code>이나 <code>vue cli</code>와 같이 <code>angular cli</code>를 제공합니다. 그저 커맨드라인을 몇 줄 치면 프로젝트 구성이 완료됩니다.</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># angular cli 설치</span></span><br><span class=\"line\">npm intall -g @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># App 기본 코드 작성하기</span></span><br><span class=\"line\">ng new my-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-app</span><br><span class=\"line\">ng server --open</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>컴포넌트를 구성하는 요소들 중 <code>html</code>과 <code>typescript</code> 파일만 보면 아래와 같습니다.</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/app/app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    Welcome to &#123;&#123; title &#125;&#125;!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/app/app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">   title = <span class=\"string\">'My First Angular App!'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>단지 위와 같이 구성하는 것만으로 2-way data binding이 가능합니다.</p>\n</li>\n<li>\n<p>위에서 2-way binding을 가능케 하는 것은 출시 당시 가장 큰 강점으로 손꼽히던 것은 바로 MVVM(Model-View-ViewModel) 패턴입니다.</p>\n<ul>\n<li>쉽게 말하면 MVC 패턴에서 Controller가 ViewModel로 바뀐 것입니다.</li>\n<li>Angular 공식에서는 MVW(Model-View-Whatever)라고 하네요.</li>\n<li>결국 View에서 데이터가 수정되거나 Model에서 데이터가 수정되거나 중간에서 컨트롤러의 역할을 해 주는 ViewModel이 서로의 데이터를 갱신하도록 조정해 줍니다.</li>\n</ul>\n</li>\n</ul>\n<h3>GraphQL</h3>\n<ul>\n<li>Anti-REST 진영의 대표주자</li>\n<li>여전히 REST를 완전히 대체하기는 어려워보임</li>\n<li>말은 Anti-Rest 지만 결국 기존의 Rest 보다 더 Restful을 지향한다고 볼 수 있음</li>\n</ul>\n<hr>\n<h2>브라우저 콘솔에서 쳐보면 ES6+의 문법이 작동하지 경우도 있던데?</h2>\n<blockquote>\n<p>번들링(Bundling)이 필요합니다.</p>\n</blockquote>\n<ul>\n<li>번들링?\n<ul>\n<li>여러개의 js, jsx, sass, less 등의 파일들을 웹 브라우저가 해석할 수 있는 html, js, css 등으로 된 하나의 파일로 묶어주는 것</li>\n<li>그리고 이러한 것을 해주는 과정 속에서 ES6를 사용할 수 있도록 코드 변경도 함께 일어납니다.</li>\n</ul>\n</li>\n</ul>\n<h2>번들링의 대표주자들</h2>\n<h3>Webpack</h3>\n<ul>\n<li>불과 1년 전 정도만 하더라도 <code>React</code>의 개발환경을 구성하기가 너무 힘들었기 때문에 대부분의 개발자들은 <code>Webpack</code>을 이용해 번들링을 했습니다.</li>\n</ul>\n<h3>Babel</h3>\n<h3>Parcel</h3>\n<ul>\n<li>비교적 신흥강자로 <code>babel</code>과 <code>webpack</code>이 불편함을 해소하고자 나온 것으로 보입니다.</li>\n<li>아직까지는 그다지 대세라거나 트렌디하다고 보기는 어렵기 때문에, 이런게 있다고만 알아두면 될 것 같습니다.</li>\n</ul>\n<hr>\n<h2>Frontend는 지금도 변화한다</h2>\n<h3>모바일까지 진출한 Frontend 기술들</h3>\n<ul>\n<li>그리고 이러한 Javascript의 저변 확대에 힘입어 모바일 역시도 Javascript를 통해 개발할 수 있게 되었습니다.</li>\n<li>Node.js의 출시로 Frontend 개발만 하던 사람들도 비교적 쉽게 Backend의 개발을 할 수 있게 되면서 Javascript의 저변이 매우 넓어졌습니다.</li>\n<li>대표적으로 <code>React Native</code>, <code>Vue Native</code>, <code>Ionic Native</code> 등이 있습니다.</li>\n<li>위 기술들의 가장 큰 장점은 <code>Android</code>와 <code>iOS</code>의 구별없이 개발이 가능하다는 점입니다. 또한 <code>Xcode</code>나 <code>Android Studio</code>의 느려터진 빌드 없이도 바로 수정 결과를 거의 즉시 확인이 가능하기 때문에 생산성 측면에 있어서도 훌륭합니다.</li>\n<li>다들 웹 기술에 기반해 있기 때문에 나중에 웹으로의 확장도 어렵지 않습니다.</li>\n<li>그러나 장점만 있지는 않습니다. 제일 큰 것은 유지보수의 어려움입니다. 문제 발생시 이것이 어디서 난 문제인지 파악하기 어렵습니다.</li>\n<li>또 당연하다면 당연하지만 <code>Native</code>에 비해 라이브러리가 턱없이 부족하며, 자체적으로 지원하는 컴포넌트들이 아니고서야 복잡한 수정사항이 발생할 경우 결국 컴파일된 <code>Native Code</code> 에 손을 대야 할 것입니다.</li>\n<li>위와 같은 일이 있기 때문에 결국에는 <code>Native</code>에 대한 지식과 웹 기반 모바일 기술에 대한 지식이 모두 필요할 수 있습니다.</li>\n<li>그럼에도 불구하고 기존에 비해 훨씬 빠르게 개발이 가능하다보니 기술 도입을 떠나서 사용해보고 작성해보는 것은 나쁘지 않을 것이라고 생각합니다.</li>\n<li>위의 <code>Native</code> 기술들 말고도 <code>Hybrid App</code>이라는 분야가 존재하지만 개인적으는 앞으로도 계속 나올지는 모르겠습니다. 퍼포먼스가 매우 떨어지고, 개발 편의성도 다른 기술들에 비해 떨어지기 때문입니다.</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}